name: release-build

on:
  # manual trigger
  workflow_dispatch:
  # push trigger
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:

  create-release:
    name: Create release
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          # release name is the same as tag name
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false
      # Any variables can not be shared between jobs, thus copy the URL 
      # of the created Github release into a file as an artifact
      - name: Create release URL file
        env:
          RELEASE_URL: ${{ steps.create-release.outputs.upload_url }}
        run: |
          echo "${RELEASE_URL}" > release-url.txt
      - name: Upload Release URL file
        uses: actions/upload-artifact@v1
        with:
          name: release-url
          path: release-url.txt

  build-and-release-asset:
    name: Push Release
    runs-on: ubuntu-latest
    needs: create-release   # release must be created before this job can start

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Go modules cache
        uses: actions/cache@v2.1.6
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_PAT }}
          registry: ghcr.io

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/v}

      - name: Publish images on GitHub Container Registry
        run: |
          make docker-push
          make docker-push-initcontainer
        env:
          IMG: ghcr.io/yokawasa/k8s-cronjob-prescaler:${{ steps.get_version.outputs.VERSION }}
          INIT_IMG: ghcr.io/yokawasa/k8s-cronjob-prescaler-initcontainer:1

      - name: Release Deployment YAML file
        run: make kustomize-release
        env:
          IMG: ghcr.io/yokawasa/k8s-cronjob-prescaler:${{ steps.get_version.outputs.VERSION }}
          INIT_IMG: ghcr.io/yokawasa/k8s-cronjob-prescaler-initcontainer:1
          VERSION: ${{ steps.get_version.outputs.VERSION }}

      - name: Download Release URL file 
        uses: actions/download-artifact@v1
        with:
          name: release-url
      # Write content of downloaded file into a step.outputs variable
      - name: Read Release URL
        id: get-release-url
        run: echo ::set-output name=upload_url::$(cat release-url/release-url.txt)

      # Upload deployment YAML file to GitHub release
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get-release-url.outputs.upload_url }}
           # `upload_url` pulls original from the CREATE RELEASE step and 
           # uploaded it as artifact above,  ee this blog post for more info: 
           # https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: k8s-cronjob-prescaler-${{ steps.get_version.outputs.VERSION }}.yaml
          asset_name: k8s-cronjob-prescaler-${{ steps.get_version.outputs.VERSION }}.yaml
          asset_content_type: application/x-yaml
